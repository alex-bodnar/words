// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package translations

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type LanguageLevel string

const (
	LanguageLevelA1 LanguageLevel = "A1"
	LanguageLevelA2 LanguageLevel = "A2"
	LanguageLevelB1 LanguageLevel = "B1"
	LanguageLevelB2 LanguageLevel = "B2"
	LanguageLevelC1 LanguageLevel = "C1"
	LanguageLevelC2 LanguageLevel = "C2"
)

func (e *LanguageLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LanguageLevel(s)
	case string:
		*e = LanguageLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for LanguageLevel: %T", src)
	}
	return nil
}

type NullLanguageLevel struct {
	LanguageLevel LanguageLevel
	Valid         bool // Valid is true if LanguageLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguageLevel) Scan(value interface{}) error {
	if value == nil {
		ns.LanguageLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LanguageLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguageLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LanguageLevel), nil
}

func (e LanguageLevel) Valid() bool {
	switch e {
	case LanguageLevelA1,
		LanguageLevelA2,
		LanguageLevelB1,
		LanguageLevelB2,
		LanguageLevelC1,
		LanguageLevelC2:
		return true
	}
	return false
}

type Description struct {
	ID          uuid.UUID     `db:"id"`
	Number      uint64        `db:"number"`
	WordID      uuid.UUID     `db:"word_id"`
	Description string        `db:"description"`
	Level       LanguageLevel `db:"level"`
	CreatedAt   time.Time     `db:"created_at"`
	UpdatedAt   time.Time     `db:"updated_at"`
}

type DescriptionGroup struct {
	DescriptionID uuid.UUID `db:"description_id"`
	GroupID       int32     `db:"group_id"`
}

type Group struct {
	ID        uint64    `db:"id"`
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
}

type Language struct {
	ID           uint64    `db:"id"`
	LanguageName string    `db:"language_name"`
	Code         string    `db:"code"`
	CreatedAt    time.Time `db:"created_at"`
	UpdatedAt    time.Time `db:"updated_at"`
}

type Translation struct {
	ID            uuid.UUID   `db:"id"`
	Number        uint64      `db:"number"`
	Translation   string      `db:"translation"`
	Transcription pgtype.Text `db:"transcription"`
	LanguageID    uint64      `db:"language_id"`
	TranslationTs interface{} `db:"translation_ts"`
	CreatedAt     time.Time   `db:"created_at"`
	UpdatedAt     time.Time   `db:"updated_at"`
}

type Word struct {
	ID            uuid.UUID   `db:"id"`
	Number        uint64      `db:"number"`
	Word          string      `db:"word"`
	Transcription pgtype.Text `db:"transcription"`
	LanguageID    int32       `db:"language_id"`
	WordTs        interface{} `db:"word_ts"`
	CreatedAt     time.Time   `db:"created_at"`
	UpdatedAt     time.Time   `db:"updated_at"`
}

type WordTranslation struct {
	WordID        uuid.UUID `db:"word_id"`
	TranslationID uuid.UUID `db:"translation_id"`
}
