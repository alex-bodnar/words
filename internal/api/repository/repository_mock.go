// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	description "github.com/alex-bodnar/words/internal/api/domain/description"
	groups "github.com/alex-bodnar/words/internal/api/domain/groups"
	languages "github.com/alex-bodnar/words/internal/api/domain/languages"
	translations "github.com/alex-bodnar/words/internal/api/domain/translations"
	words "github.com/alex-bodnar/words/internal/api/domain/words"
	gomock "github.com/golang/mock/gomock"
)

// MockDescription is a mock of Description interface.
type MockDescription struct {
	ctrl     *gomock.Controller
	recorder *MockDescriptionMockRecorder
}

// MockDescriptionMockRecorder is the mock recorder for MockDescription.
type MockDescriptionMockRecorder struct {
	mock *MockDescription
}

// NewMockDescription creates a new mock instance.
func NewMockDescription(ctrl *gomock.Controller) *MockDescription {
	mock := &MockDescription{ctrl: ctrl}
	mock.recorder = &MockDescriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescription) EXPECT() *MockDescriptionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDescription) Create(ctx context.Context, val description.Description) (description.Description, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, val)
	ret0, _ := ret[0].(description.Description)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDescriptionMockRecorder) Create(ctx, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDescription)(nil).Create), ctx, val)
}

// MockGroups is a mock of Groups interface.
type MockGroups struct {
	ctrl     *gomock.Controller
	recorder *MockGroupsMockRecorder
}

// MockGroupsMockRecorder is the mock recorder for MockGroups.
type MockGroupsMockRecorder struct {
	mock *MockGroups
}

// NewMockGroups creates a new mock instance.
func NewMockGroups(ctrl *gomock.Controller) *MockGroups {
	mock := &MockGroups{ctrl: ctrl}
	mock.recorder = &MockGroupsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroups) EXPECT() *MockGroupsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroups) Create(ctx context.Context, name string) (groups.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(groups.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupsMockRecorder) Create(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroups)(nil).Create), ctx, name)
}

// MockLanguages is a mock of Languages interface.
type MockLanguages struct {
	ctrl     *gomock.Controller
	recorder *MockLanguagesMockRecorder
}

// MockLanguagesMockRecorder is the mock recorder for MockLanguages.
type MockLanguagesMockRecorder struct {
	mock *MockLanguages
}

// NewMockLanguages creates a new mock instance.
func NewMockLanguages(ctrl *gomock.Controller) *MockLanguages {
	mock := &MockLanguages{ctrl: ctrl}
	mock.recorder = &MockLanguagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguages) EXPECT() *MockLanguagesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLanguages) Create(ctx context.Context, val languages.Language) (languages.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, val)
	ret0, _ := ret[0].(languages.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLanguagesMockRecorder) Create(ctx, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLanguages)(nil).Create), ctx, val)
}

// MockTranslations is a mock of Translations interface.
type MockTranslations struct {
	ctrl     *gomock.Controller
	recorder *MockTranslationsMockRecorder
}

// MockTranslationsMockRecorder is the mock recorder for MockTranslations.
type MockTranslationsMockRecorder struct {
	mock *MockTranslations
}

// NewMockTranslations creates a new mock instance.
func NewMockTranslations(ctrl *gomock.Controller) *MockTranslations {
	mock := &MockTranslations{ctrl: ctrl}
	mock.recorder = &MockTranslationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslations) EXPECT() *MockTranslationsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTranslations) Create(ctx context.Context, val translations.Translation) (translations.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, val)
	ret0, _ := ret[0].(translations.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTranslationsMockRecorder) Create(ctx, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTranslations)(nil).Create), ctx, val)
}

// MockWords is a mock of Words interface.
type MockWords struct {
	ctrl     *gomock.Controller
	recorder *MockWordsMockRecorder
}

// MockWordsMockRecorder is the mock recorder for MockWords.
type MockWordsMockRecorder struct {
	mock *MockWords
}

// NewMockWords creates a new mock instance.
func NewMockWords(ctrl *gomock.Controller) *MockWords {
	mock := &MockWords{ctrl: ctrl}
	mock.recorder = &MockWordsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWords) EXPECT() *MockWordsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWords) Create(ctx context.Context, val words.Word) (words.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, val)
	ret0, _ := ret[0].(words.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWordsMockRecorder) Create(ctx, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWords)(nil).Create), ctx, val)
}
